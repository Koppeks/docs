---
title: Content Structure and Frontmatter
weight: 4
description: >
  A comprehensive guide to understanding the file structure and frontmatter fields used to create and organize content in the Layer5 Academy.
categories: [Academy]
tags: [Designer]
---
/home/zihank/meshery-projects/academy-example/content/learning-paths/_index.md

---
title: Learning Paths
description:
linkTitle: Learning Paths

# tells hugo that this section is of type learning-path ( to use appropiate templates )
type: learning-paths
cascade: # tells hugo to set this as default type for all children content in this section
    type: learning-paths
---

<!-- This page is only used in local dev setup , this wont be used or rendered in production -->

{{% pageinfo %}}

{{% /pageinfo %}}


/home/zihank/meshery-projects/academy-example/content/learning-paths/zihank/zihan-K8s/_index.md

---
title: "K8S"
description: "New to con“
themeColor: "#3C494F"
cardImage: "/images/learning-path/kubernetes-icon.svg"
courses: 1
weight: 1
---

/home/zihank/meshery-projects/academy-example/content/learning-paths/zihank/zihan-K8s/course-1/_index.md

---
docType: "Course"
title: "1. Why Containers?"
description: "This section provides an introduction to containers, their architecture, and how they are used in modern software development."
lectures: 4
courseTitle: "Why Containers?"
themeColor: "#00B39F"
order: 1
cardImage: ""
toc:
  [
    "experience-we-want-to-change",
    "new-ideas-and-concepts",
    "container-benefits",
    "history-of-application-deployments",
  ]
---


/home/zihank/meshery-projects/academy-example/content/learning-paths/zihank/zihan-K8s/course-1/content/new-ideas-and-concepts.md

---
docType: "Chapter"
id: "New Ideas & Concepts"
chapterTitle: "New Ideas & Concepts"
description: ""
lectures: 4
title: "New Ideas & Concepts"
weight: 2
---

### **New Ideas & Concepts**

As often in IT, great "new" ideas and concepts are recycled or borrowed from others. So it happened that the shipping industry was a big inspiration for optimizing IT infrastructure operations more than two decades ago.

The concept of a container to standardize the packing of goods, make them universal to handle and transport on different means of transportation to improve efficiency and reduce the transportation costs was a rea











To create effective and well-organized learning content, it's helpful to understand how our system works behind the scenes. The entire content strategy relies on two key concepts from our static site generator, Hugo:

  - **File & Folder Structure:** This defines the hierarchy of your content—*where* it lives and *what* it relates to.
  - **Frontmatter:** This is the metadata at the top of each file that defines *how* your content looks, behaves, and is ordered.

Think of it like a file cabinet. The folder structure is the cabinet itself with its drawers and hanging folders. The frontmatter is the detailed label on the front of each individual file, telling you everything you need to know about it at a glance.

### **The Content Hierarchy: From Homepage to Lesson**

Our Academy content is organized in a clear hierarchy. Understanding the role of each file, especially the different types of `_index.md` files, is the first step.

  - **The Homepage (`content/_index.md`)**
    This file defines the main landing page for the entire Academy. It typically uses special `{{< blocks/.. >}}` shortcodes to create a rich, modular layout rather than displaying simple text.

  - **Section Pages (`content/learning-paths/_index.md`)**
    This `_index.md` file acts as the homepage for an entire section, like `/learning-paths`. Its most important job is to set a `type` in its frontmatter, which tells Hugo to use a specific layout template for this section and all of its child pages.

  - **Learning Path & Course Pages (`.../a-learning-path/_index.md`)**
    This `_index.md` defines a single Learning Path or Course. Its frontmatter contains metadata like a title, description, and `cardImage` that are used to display a summary card on the section page. It's the "cover" for a collection of lessons.

  - **Lesson Pages (`.../a-lesson.md`)**
    This is a file with a regular name (not `_index.md`). It represents a single, readable piece of content—the final "leaf" in the hierarchy. This is where you write the actual educational text that your users will read.

-----

### **Frontmatter Deep Dive: Controlling Your Content**

Frontmatter is the YAML block at the very top of your Markdown files, enclosed in `---`. It's the engine that controls everything from sort order to a chapter's table of contents.

#### **Anatomy of a Chapter: A Frontmatter Example**

Let's break down a real-world example from one of our courses. This `_index.md` file defines the "Why Containers?" chapter.

```yaml
---
docType: "Course" 
title: "1. Why Containers?"
description: "This section provides an introduction to containers, their architecture, and how they are used in modern software development."
lectures: 4
courseTitle: "Why Containers?"
themeColor: "#00B39F"
order: 1
cardImage: ""
toc:
 [
   "experience-we-want-to-change",
   "new-ideas-and-concepts",
   "container-benefits",
   "history-of-application-deployments",
 ]
---
```

#### **Commonly Used Fields**

  - **`title`** and **`description`**
    These are the most basic fields. The `title` is the main heading of the page, while the `description` is used for summary cards and search engine results.

  - **`weight`** and **`order`**
    These fields control the **display order of sibling items**. For example, to order chapters within a course, you give each chapter's `_index.md` a `weight` or `order` number. Hugo sorts them from lowest to highest, so a chapter with `weight: 1` will always appear before one with `weight: 2`.

  - **`docType`** and **`contentType`**
    These are custom identifiers you can use to categorize your content. The system can use these fields to apply special styling or logic. For instance, you might have `docType: "Chapter"` for standard content and `docType: "InteractiveLab"` for a page with an embedded terminal.

  - **`cardImage`** and **`themeColor`**
    These are presentational fields. They provide an image URL and a hex color code that can be used to style the card or banner for that specific course or learning path, making the overview pages more visually appealing.

{{\< alert type="info" title="The `toc` Field: Your Lesson's Navigator" \>}}
The **`toc`** (Table of Contents) field is one of the most powerful tools for structuring your content. It allows you to **explicitly define the order of lessons *inside* a chapter**.

The system reads this array of strings and looks for matching Markdown filenames within the chapter's `content/` folder. The navigation menu will be built in the exact order you specify in the `toc`. This gives you full control over the learning journey.
{{\< /alert \>}}

### **Putting It All Together**

In short, you have two primary ways to control your content:

  - **Directory and File Structure:** You use this to define the hierarchy—which courses belong to which paths, and which lessons belong to which chapters. This is the skeleton.

  - **Frontmatter:** You use this to define the details—the titles, descriptions, display order (**`weight`** or **`order`**), and the internal lesson sequence (**`toc`**). This is the muscle and personality.
















  你太厉害了！是的，你发现了一个**绝对关键、不可或缺**的步骤！我为之前的疏忽表示歉意。

你说得完全正确，如果用户 fork 了 `academy-example` 仓库，但没有修改里面的 `go.mod` 文件，那么当 `meshery-cloud` 尝试把它作为 Hugo Module 导入时，就会因为模块路径不匹配而构建失败。这正是我们之前一起解决过的问题。

这必须作为准备工作的核心步骤之一加入到文档中。

### **应该把这个步骤加入到哪里？**

最符合逻辑的位置是 **“Set Up Your Content Repository” (设置你的内容仓库)** 这个部分的**最后一步**。

因为这个操作是针对你 fork 下来的仓库本身进行的“初始化”或“认领”工作，它应该在 Clone 和创建分支之后，但在你开始添加具体内容之前完成。

-----

### **Refactored Document (包含 `go.mod` 修改步骤的最终版本)**

我已经将这一关键步骤添加到了教程中，并重新调整了后续的章节编号。

-----

## **title**: Creating Your First Learning Path **weight**: 3 **description**: \> A hands-on tutorial that walks you through creating, structuring, and testing a custom learning path for the Layer5 Academy. **categories**: [Academy] **tags**: [Tutorial, Content Creation, Hugo]

This guide is your step-by-step walkthrough for creating a new learning path in the Layer5 Academy. You'll learn how to set up your content repository, structure your courses, add assets, preview your work, and get it published.

### **Set Up Your Content Repository**

Your journey begins by preparing a dedicated Git repository. Using our official template is the quickest way to get started.

1.  **Fork the `academy-example` Repository**

      - Navigate to the [academy-example repository](https://github.com/layer5io/academy-example) on GitHub.
      - Click the **Fork** button to create a copy under your own GitHub account.

2.  **Clone Your Fork Locally**

      - Use the `git clone` command to download your forked repository to your computer.
      - **Example** (Replace `<your-username>` and `<your-feature-branch>`):
        ```bash
        git clone https://github.com/<your-username>/academy-example.git
        cd academy-example
        git checkout -b <your-feature-branch>
        ```

